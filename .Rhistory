plot(fitK, main="Conditional Inference Tree for Kyphosisâ€)
plot(fitK, main="Conditional Inference Tree for Kyphosis",type="simple")
plot(fitK, main="Conditional Inference Tree for Kyphosisâ€")
plot(fitK, main="Conditional Inference Tree for Kyphosis",type="simple")
plot(fitK, main="Conditional Inference Tree for Kyphosisâ€")
getwd()
setwd("Desktop/RPI/DataAnalytics/Lab/DataAnalytics2020-Yiqing-Chen")
#Question 1
nyt3 <- read.csv('nyt3.csv')
nyt7 <- read.csv('nyt7.csv')
nyt13 <- read.csv('nyt13.csv')
nyt18 <- read.csv('nyt18.csv')
nyt27 <- read.csb('nyt27.csv')
nyt27 <- read.csv('nyt27.csv')
View(nyt3)
boxplot(nyt3$Age,nyt3$Impressions)
boxplot(nyt3$Age,nyt3$Signed_In)
boxplot(nyt3$Age,nyt3$impression)
boxplot(nyt3$Age,nyt3$Impression)
boxplot(nyt3$Age,nyt7$Age,nyt13$Age,nyt18$Age,nyt27$Age)
boxplot(nyt3$Impressions,nyt7$Impressions,nyt13$Impressions,nyt18$Impressions,nyt27$Impressions)
boxplot(nyt3$Signed_In,nyt7$Signed_In,nyt13$Signed_In,nyt18$Signed_In,nyt27$Signed_In)
boxplot(nyt3$Clicks,nyt7$Clicks,nyt13$Clicks,nyt18$Clicks,nyt27$Clicks)
boxplot(nyt3$Impressions,nyt7$Impressions,nyt13$Impressions,nyt18$Impressions,nyt27$Impressions)
#Question2
ggplot(nyt3,aes(x=age))+geom_histogram(binwidth=4)
library(ggplot2)
#Question2
ggplot(nyt3,aes(x=age))+geom_histogram(binwidth=4)
#Question2
ggplot(nyt3,aes(x=nyt3$age))+geom_histogram(binwidth=4)
#Question2
ggplot(nyt3,aes(x=nyt3$Age))+geom_histogram(binwidth=4)
#Question2
ggplot(nyt3,aes(x=nyt3$Age))+geom_histogram(binwidth=3)
#Question2
ggplot(nyt3,aes(x=nyt3$Age))+geom_histogram(binwidth=5)
ggplot(nyt7,aes(x=nyt7$Age))+geom_histogram(binwidth=5)
ggplot(nyt13,aes(x=nyt13$Age))+geom_histogram(binwidth=5)
ggplot(nyt13,aes(x=nyt13$Age))+geom_histogram(binwidth=2)
ggplot(nyt13,aes(x=nyt13$Age))+geom_histogram(binwidth=10)
#Question1b
ggplot(nyt3,aes(x=nyt3$Age))+geom_histogram(binwidth=8)
ggplot(nyt7,aes(x=nyt7$Age))+geom_histogram(binwidth=8)
ggplot(nyt13,aes(x=nyt13$Age))+geom_histogram(binwidth=8)
ggplot(nyt18,aes(x=nyt18$Age))+geom_histogram(binwidth=8)
ggplot(nyt27,aes(x=nyt27$Age))+geom_histogram(binwidth=8)
ggplot(nyt3,aes(x=nyt3$Impressions))+geom_histogram(binwidth=8)
ggplot(nyt3,aes(x=nyt3$Impressions))+geom_histogram(binwidth=5)
ggplot(nyt3,aes(x=nyt3$Impressions))+geom_histogram(binwidth=2)
ggplot(nyt3,aes(x=nyt3$Impressions))+geom_histogram(binwidth=1)
#Question1b
ggplot(nyt3,aes(x=nyt3$Age))+geom_histogram(binwidth=1)
ggplot(nyt7,aes(x=nyt7$Impressions))+geom_histogram(binwidth=1)
ggplot(nyt3,aes(x=nyt3$Impressions))+geom_histogram(binwidth=1)
ggplot(nyt7,aes(x=nyt7$Impressions))+geom_histogram(binwidth=1)
ggplot(nyt13,aes(x=nyt13$Impressions))+geom_histogram(binwidth=1)
ggplot(nyt18,aes(x=nyt18$Impressions))+geom_histogram(binwidth=1)
ggplot(nyt27,aes(x=nyt27$Impressions))+geom_histogram(binwidth=1)
#Question1c
plot(ecdf(nyt3$Age),do.points=FALSE,verticals=TRUE)
#Question1c
plot(ecdf(nyt3$Age),do.points=TRUE,verticals=TRUE)
#Question1c
plot(ecdf(nyt3$Age),do.points=FALSE,verticals=TRUE)
plot(ecdf(nyt7$Age),do.points=FALSE,verticals=TRUE)
plot(ecdf(nyt13$Age),do.points=FALSE,verticals=TRUE)
plot(ecdf(nyt18$Age),do.points=FALSE,verticals=TRUE)
plot(ecdf(nyt27$Age),do.points=FALSE,verticals=TRUE)
plot(ecdf(nyt3$Impressions),do.points=FALSE,verticals=TRUE)
plot(ecdf(nyt7$Impressions),do.points=FALSE,verticals=TRUE)
plot(ecdf(nyt3$Impressions),do.points=FALSE,verticals=TRUE)
plot(ecdf(nyt7$Impressions),do.points=FALSE,verticals=TRUE)
plot(ecdf(nyt13$Impressions),do.points=FALSE,verticals=TRUE)
plot(ecdf(nyt18$Impressions),do.points=FALSE,verticals=TRUE)
plot(ecdf(nyt27$Impressions),do.points=FALSE,verticals=TRUE)
qqplot(qt(ppoints(250),df=5),nyt3$Age,xlab = "Q-Q Plot for Age")
qqplot(qt(ppoints(500),df=5),nyt3$Age,xlab = "Q-Q Plot for Age")
qqplot(qt(ppoints(100),df=5),nyt3$Age,xlab = "Q-Q Plot for Age")
qqplot(qt(ppoints(100),df=10),nyt3$Age,xlab = "Q-Q Plot for Age")
qqplot(qt(ppoints(100),df=2),nyt3$Age,xlab = "Q-Q Plot for Age")
qqplot(qt(ppoints(150),df=3),nyt3$Age,xlab = "Q-Q Plot for Age")
qqplot(qt(ppoints(150),df=3),nyt7$Age,xlab = "Q-Q Plot for Age")
qqplot(qt(ppoints(150),df=3),nyt13$Age,xlab = "Q-Q Plot for Age")
qqplot(qt(ppoints(150),df=3),nyt18$Age,xlab = "Q-Q Plot for Age")
qqplot(qt(ppoints(150),df=3),nyt27$Age,xlab = "Q-Q Plot for Age")
qqplot(qt(ppoints(50),df=3),nyt27$Age,xlab = "Q-Q Plot for Age")
qqplot(qt(ppoints(100),df=5),nyt27$Age,xlab = "Q-Q Plot for Age")
qqplot(qt(ppoints(100),df=3),nyt27$Age,xlab = "Q-Q Plot for Age")
qqplot(qt(ppoints(100),df=3),nyt3$Age,xlab = "Q-Q Plot for Age")
qqplot(qt(ppoints(100),df=3),nyt7$Age,xlab = "Q-Q Plot for Age")
qqplot(qt(ppoints(100),df=3),nyt13$Age,xlab = "Q-Q Plot for Age")
qqplot(qt(ppoints(100),df=3),nyt18$Age,xlab = "Q-Q Plot for Age")
qqplot(qt(ppoints(100),df=3),nyt27$Age,xlab = "Q-Q Plot for Age")
qqplot(qt(ppoints(100),df=3),nyt3$Impressions,xlab = "Q-Q Plot for Impressions")
qqplot(qt(ppoints(100),df=3),nyt3$Impressions,xlab = "Q-Q Plot for Impressions")
qqplot(qt(ppoints(100),df=3),nyt7$Impressions,xlab = "Q-Q Plot for Impressions")
qqplot(qt(ppoints(100),df=3),nyt13$Impressions,xlab = "Q-Q Plot for Impressions")
qqplot(qt(ppoints(100),df=3),nyt17$Impressions,xlab = "Q-Q Plot for Impressions")
qqplot(qt(ppoints(100),df=3),nyt18$Impressions,xlab = "Q-Q Plot for Impressions")
qqplot(qt(ppoints(100),df=3),nyt28$Impressions,xlab = "Q-Q Plot for Impressions")
qqplot(qt(ppoints(100),df=3),nyt3$Impressions,xlab = "Q-Q Plot for Impressions")
qqplot(qt(ppoints(100),df=3),nyt3$Age,xlab = "Q-Q Plot for Age")
qqplot(qt(ppoints(100),df=3),nyt7$Impressions,xlab = "Q-Q Plot for Impressions")
qqplot(qt(ppoints(100),df=3),nyt3$Age,xlab = "Q-Q Plot for Age")
qqnorm(nyt3$Age);qqline(nyt3$Age)
#Question1d
shapiro.test(nyt3$Age)
#Question1d
shapiro.test(nyt3$Age[:5000,])
#Question1d
shapiro.test(nyt3$Age[1:5000,])
#Question1d
shapiro.test(nyt3$Age[1:5000])
#Question1d
shapiro.test(sample_n(nyt3$Age,5000))
#Question1d
library(dplyr)
shapiro.test(sample_n(nyt3$Age,5000))
shapiro.test(sample(nyt3$Age(1:5000)))
age3 <- data.frame(nyt3$Age)
shapiro.test(sample_n(age3,5000))
age3 <- sample_n(data.frame(nyt3$Age),5000)
shapiro.test(age3)
age3 <- data.frame(sample_n(nyt3$Age,5000))
age3 <- data.frame(sample_n(nyt3$Age),5000)
age3 <- sample_n(data.frame(nyt3$Age),5000)
shapiro.test(age3)
shapiro.test(age3,is.numeric(x)=TRUE)
set.seed(1234)
age3 <- sample_n(data.frame(nyt3),5000)
shapiro.test(age3$Age)
age7 <- sample_n(data.frame(nyt7),5000)
shapiro.test(age7$Age)
shapiro.test(age13$Age)
age13 <- sample_n(data.frame(nyt13),5000)
age13 <- sample_n(data.frame(nyt13),5000)
shapiro.test(age13$Age)
age18 <- sample_n(data.frame(nyt18),5000)
shapiro.test(age18$Age)
age27 <- sample_n(data.frame(nyt27),5000)
shapiro.test(age27$Age)
sharpio.test(age3$Impressions)
sharpio.test(age3$Impressions)
sharpio.test(age3$Impressions)
age3 <- sample_n(data.frame(nyt3),5000)
sharpio.test(age3$Impressions)
shapiro.test(age3$Impressions)
shapiro.test(age7$Impressions)
shapiro.test(age13$Impressions)
shapiro.test(age18$Impressions)
shapiro.test(age27$Impressions)
ageno0 <- filter(nyt3$Age > 0)
ageno0 <- data.frame(filter(nyt3$Age > 0))
ageno0 <- filter(nyt3$Age > 0)
library(dplyr)
ageno0 <- nyt3 %>% filter(Age != 0)
ageno03<- sample_n(data.frame(nyt3),5000)
ageno03<- sample_n(data.frame(ageno0),5000)
shapiro.test(ageno03$Age)
ageno1 <- nyt3[!apply(nyt3$Age==0, 1, all),]
ageno1 <- nyt3[apply(nyt3$Age!=0, 1, all),]
ageno1 <- nyt3[apply(data.frame(nyt3$Age)!=0, 1, all),]
ageno10 <- sample_n(data.frame(ageno1),5000)
shapiro.test(ageno1$Age)
shapiro.test(ageno10$Age)
ageno03 <- nyt3 %>% filter(Age != 0)
ageno07 <- nyt7 %>% filter(Age != 0)
boxplot(ageno03$Age,ageno07$Age)
ageno03 <- ageno03[ageno03$Age > quantile(ageno03$Age, .25) - 1.5*IQR(ageno03$Age) &
ageno03$Age < quantile(ageno03$Age, .75) + 1.5*IQR(ageno03$Age), ]
ageno03 <- ageno03[ageno03$Impressions > quantile(ageno03$Impressions, .25) - 1.5*IQR(ageno03$Impressions) &
ageno03$Impressions < quantile(ageno03$Impressions, .75) + 1.5*IQR(ageno03$Impressions), ]
ageno07 <- ageno07[ageno07$Age > quantile(ageno07$Age, .25) - 1.5*IQR(ageno07$Age) &
ageno07$Age < quantile(ageno07$Age, .75) + 1.5*IQR(ageno07$Age), ]
ageno07 <- ageno07[ageno07$Impressions > quantile(ageno07$Impressions, .25) - 1.5*IQR(ageno07$Impressions) &
ageno07$Impressions < quantile(ageno07$Impressions, .75) + 1.5*IQR(ageno07$Impressions), ]
ageno07 <- ageno07[ageno07$Age > quantile(ageno07$Age, .25) - 1.5*IQR(ageno07$Age) &
ageno07$Age < quantile(ageno07$Age, .75) + 1.5*IQR(ageno07$Age), ]
boxplot(ageno03$Age,ageno07$Age)
boxplot(ageno03$Impressions,ageno07$Impressions)
ggplot(ageno03,aes(x=ageno03$Age))+geom_histogram(binwidth=8)
ggplot(ageno03,aes(x=ageno03$Impressions))+geom_histogram(binwidth=8)
ggplot(ageno03,aes(x=ageno03$Impressions))+geom_histogram(binwidth=1)
ggplot(ageno07,aes(x=ageno07$Age))+geom_histogram(binwidth=8)
ggplot(ageno07,aes(x=ageno07$Impressions))+geom_histogram(binwidth=1)
plot(ecdf(ageno03$Age),do.points=FALSE,verticals=TRUE)
plot(ecdf(ageno03$Impressions),do.points=FALSE,verticals=TRUE)
shapiro.test(age13$Age)
ggplot(ageno03,aes(x=ageno03$Impressions))+geom_histogram(binwidth=1)
plot(ecdf(ageno03$Age),do.points=FALSE,verticals=TRUE)
#perform the graphics again
boxplot(ageno03$Age,ageno07$Age)
ageno03 <- normalize(ageno03, method = "standardize", range = c(1, 90), margin = 1L, on.constant = "quiet")
normalize <- function(x){
return((x-min(x))/(max(x)-min(x)))
}
View(nyt3)
ageno03[1,3]<-as.data.frame(lapply(aba[1,3],normalize))
ageno03[1,3]<-as.data.frame(lapply(ageno03[1,3],normalize))
ageno03s<- sample_n(data.frame(ageno03),5000)
shapiro.test(ageno03$Age)
shapiro.test(ageno03s$Age)
ageno03[1:5]<-as.data.frame(lapply(ageno03[1:5],normalize))
ageno03s<- sample_n(data.frame(ageno03),5000)
shapiro.test(ageno03s$Age)
ageno03[1,3]<-as.data.frame(lapply(ageno03[1,3],normalize))
ageno07[1,3]<-as.data.frame(lapply(ageno07[1,3],normalize))
ageno07[1,3]<-as.data.frame(lapply(ageno07[1,3],normalize))
plot(ecdf(ageno07$Impressions),do.points=FALSE,verticals=TRUE)
qqnorm(ageno03$Age);qqline(ageno03$Age,lwd = 2, col = 1)
qqnorm(ageno03$Age);qqline(ageno03$Age,lwd = 2, col = 2)
qqnorm(ageno03$Age);qqline(ageno03$Age,lwd = 2, col = 3)
#perform the graphics again
boxplot(ageno03$Age,ageno07$Age)
ageno03 <- nyt3 %>% filter(Age != 0)
ageno03 <- ageno03[ageno03$Age > quantile(ageno03$Age, .25) - 1.5*IQR(ageno03$Age) &
ageno03$Age < quantile(ageno03$Age, .75) + 1.5*IQR(ageno03$Age), ]
ageno03 <- ageno03[ageno03$Impressions > quantile(ageno03$Impressions, .25) - 1.5*IQR(ageno03$Impressions) &
ageno03$Impressions < quantile(ageno03$Impressions, .75) + 1.5*IQR(ageno03$Impressions), ]
normalize <- function(x){
return((x-min(x))/(max(x)-min(x)))
}
ageno03[1,3]<-as.data.frame(lapply(ageno03[1,3],normalize))
ageno07 <- nyt7 %>% filter(Age != 0)
ageno07 <- ageno07[ageno07$Age > quantile(ageno07$Age, .25) - 1.5*IQR(ageno07$Age) &
ageno07$Age < quantile(ageno07$Age, .75) + 1.5*IQR(ageno07$Age), ]
ageno07 <- ageno07[ageno07$Impressions > quantile(ageno07$Impressions, .25) - 1.5*IQR(ageno07$Impressions) &
ageno07$Impressions < quantile(ageno07$Impressions, .75) + 1.5*IQR(ageno07$Impressions), ]
ageno07[1,3]<-as.data.frame(lapply(ageno07[1,3],normalize))
#perform the graphics again
boxplot(ageno03$Age,ageno07$Age)
boxplot(ageno03$Impressions,ageno07$Impressions)
ggplot(ageno03,aes(x=ageno03$Age))+geom_histogram(binwidth=8)
ggplot(ageno03,aes(x=ageno03$Impressions))+geom_histogram(binwidth=1)
ggplot(ageno07,aes(x=ageno07$Age))+geom_histogram(binwidth=8)
ggplot(ageno07,aes(x=ageno07$Impressions))+geom_histogram(binwidth=1)
plot(ecdf(ageno03$Age),do.points=FALSE,verticals=TRUE)
plot(ecdf(ageno03$Impressions),do.points=FALSE,verticals=TRUE)
plot(ecdf(ageno03$Age),do.points=FALSE,verticals=TRUE)
plot(ecdf(ageno07$Impressions),do.points=FALSE,verticals=TRUE)
qqnorm(ageno07$Age);qqline(ageno07$Age,lwd = 2, col = 3)
qqnorm(ageno03$Impressions);qqline(ageno03$Impressions,lwd = 2, col = 3)
qqnorm(ageno07$Impressions);qqline(ageno07$Impressions,lwd = 2, col = 3)
ageno03s<- sample_n(data.frame(ageno03),5000)
shapiro.test(ageno03s$Age)
shapiro.test(ageno03s$Impressions)
ageno07s<- sample_n(data.frame(ageno07),5000)
shapiro.test(ageno07s$Age)
shapiro.test(ageno07s$Impressions)
#Question 1a
nyt3 <- read.csv('nyt3.csv')
nyt7 <- read.csv('nyt7.csv')
nyt13 <- read.csv('nyt13.csv')
nyt18 <- read.csv('nyt18.csv')
nyt27 <- read.csv('nyt27.csv')
#Question1d
library(dplyr)
set.seed(1234)
age3 <- sample_n(data.frame(nyt3),5000)
wilcox.test(age3$age,mu=20,conf.int=TRUE)
wilcox.test(age3$Age,mu=20,conf.int=TRUE)
ageno03 <- nyt3 %>% filter(Age != 0)
ageno03 <- ageno03[ageno03$Age > quantile(ageno03$Age, .25) - 1.5*IQR(ageno03$Age) &
ageno03$Age < quantile(ageno03$Age, .75) + 1.5*IQR(ageno03$Age), ]
ageno03 <- ageno03[ageno03$Impressions > quantile(ageno03$Impressions, .25) - 1.5*IQR(ageno03$Impressions) &
ageno03$Impressions < quantile(ageno03$Impressions, .75) + 1.5*IQR(ageno03$Impressions), ]
normalize <- function(x){
return((x-min(x))/(max(x)-min(x)))
}
ageno03[1,3]<-as.data.frame(lapply(ageno03[1,3],normalize))
ageno07 <- nyt7 %>% filter(Age != 0)
ageno07 <- ageno07[ageno07$Age > quantile(ageno07$Age, .25) - 1.5*IQR(ageno07$Age) &
ageno07$Age < quantile(ageno07$Age, .75) + 1.5*IQR(ageno07$Age), ]
ageno07 <- ageno07[ageno07$Impressions > quantile(ageno07$Impressions, .25) - 1.5*IQR(ageno07$Impressions) &
ageno07$Impressions < quantile(ageno07$Impressions, .75) + 1.5*IQR(ageno07$Impressions), ]
ageno07[1,3]<-as.data.frame(lapply(ageno07[1,3],normalize))
#redo the shapiro test to test normality
ageno03s<- sample_n(data.frame(ageno03),5000)
wilcox.test(ageno03s$Age,mu=20,conf.int=TRUE)
getwd()
cancer <- read.csv('cancer.csv')
str(cancer)
summary(cancer)
require(C50)
data('iris')
head(iris)
str(iris)
table(iris$Species)
# It is important to set the seed in order to get the same randomly generated numbers
# when we run the model over and over.
set.seed(9850)
# generate random numbers
grn <- runif(nrow(iris))
# creating a randomized iris dataset, shuffling the dataset
# we use the order() function along with the random numbers we generated
irisrand <- iris[order(grn),]
# observe that rows are now randomly shuffled
str(irisrand)
classificationmodel1 <- C5.0(irisrand[1:100,-5],irisrand[1:100,5])
classificationmodel1
getwd()
# creating a matrix data with random numbers
# and plotting the matrix using the image() function
# you will see there, it does not have a real pattern in the plot.
set.seed(12345)
help(par)
# par can be used to set or query graphical parameters.
# Parameters can be set by specifying them as arguments
# to par in tag = value form, or by passing them as a list of tagged values.
par(mar=rep(0.2,4))
data_Matrix <- matrix(rnorm(400),nrow = 40)
image(1:10,1:40,t(data_Matrix)[,nrow(data_Matrix):1])r
image(1:10,1:40,t(data_Matrix)[,nrow(data_Matrix):1])
help(image)
# now we can run a hierarchical cluster analysis on the dataset
# we will use the heatmap() function that is available in R
help("heatmap")
help(rep)
heatmap(data_Matrix)
image(1:10,1:40,t(data_Matrix)[,nrow(data_Matrix):1])
heatmap(data_Matrix)
# When we run the heatmap() here, we get the dendrograms printed on the both columns and the rows
# and still there is no real immerging pattern that is interesting to us,
# it is because there is no real interesting pattern underlying in the data we generated.
# Now we will add a pattern to the data by doing a random coin flip.
# we will use the rbinom() function along with a for-loop.
help("rbinom")
set.seed(678910)
data_Matrix[i,] <- data_Matrix[i,]+rep(c(0,3),each=5)
for i in (1:40):{
# flipping a coin and getting the data
coin_flip <- rbinom(1,size=1,prob=0.5)
# if the coin is "Heads", add a common pattern to that row,
if(coin_flip){
data_Matrix[i,] <- data_Matrix[i,]+rep(c(0,3),each=5)
}
}
for i in (1:40):{
# flipping a coin and getting the data
coin_flip <- rbinom(1,size=1,prob=0.5)
# if the coin is "Heads", add a common pattern to that row,
if(coin_flip){
data_Matrix[i,] <- data_Matrix[i,]+rep(c(0,3),each=5)
}
}
for i in (1:40):{
# flipping a coin and getting the data
coin_flip <- rbinom(1,size=1,prob=0.5)
# if the coin is "Heads", add a common pattern to that row,
if(coin_flip){
data_Matrix[i,] <- data_Matrix[i,]+rep(c(0,3),each=5)
}
}
help(rep)
set.seed(678910)
for i in (1:40):{
# flipping a coin and getting the data
coin_flip <- rbinom(1,size=1,prob=0.5)
# if the coin is "Heads", add a common pattern to that row,
if(coin_flip){
data_Matrix[i,] <- data_Matrix[i,]+rep(c(0,3),each=5)
}
}
for (i in 1:40){
# flipping a coin and getting the data
coin_flip <- rbinom(1,size=1,prob=0.5)
# if the coin is "Heads", add a common pattern to that row,
if(coin_flip){
data_Matrix[i,] <- data_Matrix[i,]+rep(c(0,3),each=5)
}
}
# Now we will plot the data
# Now we can see that the right hand five columns have more yellow in them,
# which means they have a higher value and the left hand five columns that are little bit more in red color which means they have a lower value.
# it is because some of the rows have a mean of three in the right hand side, and
# some of the rows have mean of zero. Now we have introduced some pattern to it
par(mar=rep(0.2,4))
image(1:10,1:40,t(data_Matrix)[,nrow(data_Matrix):1])
heatmap(data_Matrix)
# now we will run the heatmap() function on the data, we can see that, two #sets of columns are easily separated.
par(mar=rep(0.2, 4))
heatmap(data_Matrix)
# Let's take a closer look at the patterns in rows and columns by looking at the marginal
# means of the rows and columns.
# ten different columns mean and forty different rows means
hh <- hclust(dist(data_Matrix))
data_matrix_ordered <- data_Matrix[hh$order,]
par(mfrow=c(1,3)) # # set the plotting area into a 1*3 array
par(mfrow=c(1,3)) # set the plotting area into a 1*3 array
image(t(data_matrix_ordered)[,nrow(data_matrix_ordered):1])
plot(rowMeans(data_matrix_ordered),40:1,xlab='The Row Mean',ylab='Row',pch=19)
plot(colMeans(data_matrix_ordered),xlab='Column',ylab='The Column Mean',pch=19)
# LAB1 BRONX1
library(gdata)
# LAB1 BRONX1
install.packages('gdata')
library(gdata)
#faster xls reader but requires perl
bronx1<-read.xls(file.choose(),pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1,perl="<SOMEWHERE>/perl/bin/perl.exe")
#faster xls reader but requires perl
bronx1<-read.xls(file.choose(),pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1,perl="<SOMEWHERE>/perl/bin/perl.exe")
# LAB1 BRONX1
library(gdata)
#faster xls reader but requires perl!
bronx1<-read.xls(file.choose(),pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1,perl="rollingsales_bronx.xls")
#faster xls reader but requires perl!
bronx1<-read.xls(file.choose(),pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1,perl="rollingsales_bronx.xls")
#faster xls reader but requires perl!
bronx1<-read.xls('rollingsales_bronx.xls',pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1,perl=perl)
#faster xls reader but requires perl!
bronx1<-read.xls('rollingsales_bronx.xls',perl=perl)
#faster xls reader but requires perl!
bronx1<-read.xls('rollingsales_bronx.xls')
bronx1<-bronx1[which(bronx1$GROSS.SQUARE.FEET!="0" & bronx1$LAND.SQUARE.FEET!="0" & bronx1$SALE.PRICE!="$0"),]
#alternate
#library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
#bronx1<-read.xlsx("<SOMEWHERE>/rollingsales_bronx.xls",pattern="BOROUGH",stringsAsFactors=FALSE,sheetIndex=1,startRow=5,header=TRUE)
View(bronx1)
#alternate
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
#alternate
#library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
bronx1<-read.xlsx("rollingsales_bronx.xls",pattern="BOROUGH",stringsAsFactors=FALSE,sheetIndex=1,startRow=5,header=TRUE)
#alternate
#library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
bronx1<-read.xls("rollingsales_bronx.xls",pattern="BOROUGH",stringsAsFactors=FALSE,sheetIndex=1,startRow=5,header=TRUE)
View(bronx1)
attach(bronx1) # If you choose to attach, leave out the "data=." in lm regression
SALE.PRICE<-sub("\\$","",SALE.PRICE)
#faster xls reader but requires perl!
bronx1<-read.xls(file.choose(),pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1,perl="perl/bin/perl.exe")
# LAB 1 KKNN1
require(kknn)
# LAB 1 KKNN1
install.packages('kknn')
require(kknn)
data(iris)
m <- dim(iris)[1]
val <- sample(1:m, size = round(m/3), replace = FALSE, prob = rep(1/m, m))
iris.learn <- iris[-val,] 	# train
iris.valid <- iris[val,]	# test
iris.kknn <- train.kknn(Species~., iris.learn, distance = 1, kernel = c("triangular", "epanechnikov", "biweight", "triweight", "cos", "inv", "gaussian", "rank", "optimal") )
summary(iris.kknn)
table(predict(iris.kknn,iris.valid),iris.valid$Species)
head(iris.kknn$W)
head(iris.kknn$D)
head(iris.kknn$C)
head(iris.kknn$fitted.values)
m <- dim(iris)[1]
val <- sample(1:m, size = round(m/3), replace = FALSE,
prob = rep(1/m, m))
iris.learn <- iris[-val,]
iris.valid <- iris[val,]
iris.kknn <- kknn(Species~., iris.learn, iris.valid, distance = 1,
kernel = "triangular")
summary(iris.kknn)
fit <- fitted(iris.kknn)
table(iris.valid$Species, fit)
pcol <- as.character(as.numeric(iris.valid$Species))
pairs(iris.valid[1:4], pch = pcol, col = c("green3", "redâ€")[(iris.valid$Species != fit)+1])
pairs(iris.valid[1:4], pch = pcol, col = c("green3", "red")[(iris.valid$Species != fit)+1])
# LAB 1 KKNN2
require(kknn)
data(ionosphere)
ionosphere.learn <- ionosphere[1:200,]
ionosphere.valid <- ionosphere[-c(1:200),]
fit.kknn <- kknn(class ~ ., ionosphere.learn, ionosphere.valid)
table(ionosphere.valid$class, fit.kknn$fit)
(fit.train1 <- train.kknn(class ~ ., ionosphere.learn, kmax = 15,
kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 1))
table(predict(fit.train1, ionosphere.valid), ionosphere.valid$class)
(fit.train2 <- train.kknn(class ~ ., ionosphere.learn, kmax = 15,
kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 2))
table(predict(fit.train2, ionosphere.valid), ionosphere.valid$class)
# LAB 1 KKNN3
data(swiss)
pairs(~ Fertility + Education + Catholic, data = swiss, subset = Education < 20, main = "Swiss data, Education < 20")
sclass <- kmeans(swiss[2:6], 3)
table(sclass$cluster, swiss[,1])
# LAB 1 NYT1
nyt1<-read.csv("nyt1.csv")
nyt1<-nyt1[which(nyt1$Impressions>0 & nyt1$Clicks>0 & nyt1$Age>0),]
nnyt1<-dim(nyt1)[1]		# shrink it down!
sampling.rate=0.9
num.test.set.labels=nnyt1*(1.-sampling.rate)
training <-sample(1:nnyt1,sampling.rate*nnyt1, replace=FALSE)
train<-subset(nyt1[training,],select=c(Age,Impressions))
testing<-setdiff(1:nnyt1,training)
test<-subset(nyt1[testing,],select=c(Age,Impressions))
cg<-nyt1$Gender[training]
true.labels<-nyt1$Gender[testing]
classif<-knn(train,test,cg,k=5) #
classif<-kknn(train,test,cg,k=5) #
# LAB 1 NYT1
nyt1<-read.csv("nyt1.csv")
nyt1<-nyt1[which(nyt1$Impressions>0 & nyt1$Clicks>0 & nyt1$Age>0),]
nnyt1<-dim(nyt1)[1]		# shrink it down!
sampling.rate=0.9
# LAB 1 KKNN2
require(kknn)
sampling.rate=0.9
num.test.set.labels=nnyt1*(1.-sampling.rate)
training <-sample(1:nnyt1,sampling.rate*nnyt1, replace=FALSE)
train<-subset(nyt1[training,],select=c(Age,Impressions))
testing<-setdiff(1:nnyt1,training)
test<-subset(nyt1[testing,],select=c(Age,Impressions))
cg<-nyt1$Gender[training]
true.labels<-nyt1$Gender[testing]
classif<-kknn(train,test,cg,k=5)
classif
attributes(.Last.value)
